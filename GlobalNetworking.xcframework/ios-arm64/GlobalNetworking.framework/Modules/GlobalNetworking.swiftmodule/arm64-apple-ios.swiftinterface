// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios17.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name GlobalNetworking
import Combine
import Foundation
@_exported import GlobalNetworking
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
final public class NetworkLogger : GlobalNetworking.NetworkLoggerProtocol {
  public init()
  final public func logCurlString(_ urlRequest: Foundation.URLRequest?)
  final public func logRequest(_ endpoint: any GlobalNetworking.Endpoint)
  final public func logResponse(_ responseLogging: GlobalNetworking.ResponseLogging)
  @objc deinit
}
public protocol NetworkLoggerProtocol : Swift.Sendable {
  func logCurlString(_ urlRequest: Foundation.URLRequest?)
  func logRequest(_ endpoint: any GlobalNetworking.Endpoint)
  func logResponse(_ responseLogging: GlobalNetworking.ResponseLogging)
}
public enum ResponseLogging {
  case success(data: Foundation.Data, endpoint: any GlobalNetworking.Endpoint)
  case failure(reason: Swift.String, endpoint: any GlobalNetworking.Endpoint, data: Foundation.Data? = nil)
}
final public class NetworkManager<EndpointItem> where EndpointItem : GlobalNetworking.Endpoint {
  public init(session: any GlobalNetworking.URLSessionProtocol = URLSession.shared, timeoutInterval: Foundation.TimeInterval = 10, clientErrorType: any GlobalNetworking.APIError.Type, logger: any GlobalNetworking.NetworkLoggerProtocol = NetworkLogger(), successStatusCodes: Swift.ClosedRange<Swift.Int> = 200...209)
  @objc deinit
}
extension GlobalNetworking.NetworkManager : GlobalNetworking.NetworkManagerProtocol {
  final public func request<T>(endpoint: EndpointItem, responseType: T.Type) -> Combine.AnyPublisher<T, GlobalNetworking.APIClientError> where T : Swift.Decodable
  final public func request<T>(endpoint: EndpointItem, responseType: T.Type) async throws -> T where T : Swift.Decodable
  final public func request<T>(endpoint: EndpointItem, responseType: T.Type, completion: @escaping GlobalNetworking.NetworkHandler<T>) where T : Swift.Decodable
}
public protocol NetworkManagerProtocol {
  associatedtype EndpointItem : GlobalNetworking.Endpoint
  func request<T>(endpoint: Self.EndpointItem, responseType: T.Type) -> Combine.AnyPublisher<T, GlobalNetworking.APIClientError> where T : Swift.Decodable
  func request<T>(endpoint: Self.EndpointItem, responseType: T.Type) async throws -> T where T : Swift.Decodable
  func request<T>(endpoint: Self.EndpointItem, responseType: T.Type, completion: @escaping GlobalNetworking.NetworkHandler<T>) where T : Swift.Decodable
}
public protocol URLSessionProtocol {
  func dataTaskPublisher(for request: Foundation.URLRequest) -> Foundation.URLSession.DataTaskPublisher
  func data(for request: Foundation.URLRequest) async throws -> (Foundation.Data, Foundation.URLResponse)
}
extension Foundation.URLSession : GlobalNetworking.URLSessionProtocol {
}
public protocol Endpoint : Swift.CustomStringConvertible {
  var baseUrl: Swift.String { get }
  var path: Swift.String { get }
  var params: [Swift.String : Any]? { get }
  var headers: GlobalNetworking.HTTPHeaders? { get }
  var url: Swift.String { get }
  var method: GlobalNetworking.HTTPMethod { get }
  var encoding: GlobalNetworking.ParameterEncoding { get }
  var defaultHeaders: GlobalNetworking.HTTPHeaders { get }
}
extension GlobalNetworking.Endpoint {
  public var description: Swift.String {
    get
  }
  public var encoding: GlobalNetworking.ParameterEncoding {
    get
  }
  public var defaultHeaders: GlobalNetworking.HTTPHeaders {
    get
  }
}
public protocol APIError : AnyObject, Swift.Decodable, Swift.Encodable {
  var message: Swift.String { get }
  var statusCode: Swift.Int? { get set }
}
public enum APIClientError : Swift.Error {
  case handledError(error: any GlobalNetworking.APIError)
  case networkError
  case decodingError(error: Swift.DecodingError?)
  case timeout
  case badRequest
  public var message: Swift.String {
    get
  }
  public var debugMessage: Swift.String {
    get
  }
  public var statusCode: Swift.Int {
    get
  }
}
public enum ParameterEncoding {
  case url
  case json
  public static func == (a: GlobalNetworking.ParameterEncoding, b: GlobalNetworking.ParameterEncoding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class EmptyResponse : Swift.Codable {
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct HTTPHeader {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
}
public struct HTTPHeaders {
  public init()
  public init(headers: [GlobalNetworking.HTTPHeader])
  public mutating func add(_ header: GlobalNetworking.HTTPHeader)
  public func embed(into request: Foundation.URLRequest) -> Foundation.URLRequest
}
public struct HTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let connect: GlobalNetworking.HTTPMethod
  public static let delete: GlobalNetworking.HTTPMethod
  public static let get: GlobalNetworking.HTTPMethod
  public static let head: GlobalNetworking.HTTPMethod
  public static let options: GlobalNetworking.HTTPMethod
  public static let patch: GlobalNetworking.HTTPMethod
  public static let post: GlobalNetworking.HTTPMethod
  public static let put: GlobalNetworking.HTTPMethod
  public static let query: GlobalNetworking.HTTPMethod
  public static let trace: GlobalNetworking.HTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
public typealias Closure<T> = ((Swift.Int) -> Swift.Void)
public typealias ErrorStatusCodeHandler = GlobalNetworking.Closure<Swift.Int>
public typealias NetworkHandler<T> = (Swift.Result<T, GlobalNetworking.APIClientError>) -> Swift.Void where T : Swift.Decodable
extension GlobalNetworking.ParameterEncoding : Swift.Equatable {}
extension GlobalNetworking.ParameterEncoding : Swift.Hashable {}
